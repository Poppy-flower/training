1.简单介绍一下require.js
	AMD,模块化开发,解决依赖的问题.
	原理：<data-main属性加载入口文件，在底层动态创建script标签，用正则表达式匹配加载的入口文件名，动态的创建标签，动态的加载。>
	1.在入口函数main.js里面定义的require方法或者define方法，requireJS会把这些  依赖和回调方法  都用一个数据结构保存起来。
	2.当页面加载时，requireJS会根据这些依赖预先把需要的js通过document.createElement的方法引入到dom中，这样，被引入dom中的script便会运行。
	3.当js里需要用到依赖所返回的结果时,requireJS便会把之前那个保存回调方法的数据结构里面的方法拿出来并且运行，然后把结果给需要依赖的方法。
	seajs 底层怎么实现的，先判断依赖关系，先把函数变成一个字符串，只需要正则表达式来匹配require关键词后面的引用关系即可。当前模块在加载所依赖的模块的是，所依赖的模块同样也需要进行这一过程，直到所有的依赖都加载执行完毕，当前模块才开始执行;
2.AMD，CMD区别
	AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。(依赖前置)
	CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。(依赖就近)
	区别：
		(1) 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行。CMD 推崇 as lazy as possible.
		(2) CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：
		// CMD
		define(function(require, exports, module) {
			var a = require('./a')
			a.doSomething()
			// AMD
			define(['./a', './b'], function(a, b) { // 依赖必须一开始就写好
			a.doSomething()
		})