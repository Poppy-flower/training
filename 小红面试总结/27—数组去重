1.数组去重的方法（3种）
   第一种是比较常规的方法
   思路：
   1.构建一个新的数组存放结果
   2.for循环中每次从原数组中取出一个元素，用这个元素循环与结果数组对比
   3.若结果数组中没有该元素，则存到结果数组中
   代码如下：
     Array.prototype.unique1 = function(){
      var res = [this[0]];
      for(var i = 1; i < this.length; i++){
       var repeat = false;
       for(var j = 0; j < res.length; j++){
        if(this[i] == res[j]){
         repeat = true;
         break;
        }
       }
       if(!repeat){
        res.push(this[i]);
       }
      }
      return res;
     }
     var arr = [1, 'a', 'a', 'b', 'd', 'e', 'e', 1, 0]
     alert(arr.unique1());

   第二种方法比上面的方法效率要高
   思路：
   1.先将原数组进行排序
   2.检查原数组中的第i个元素 与 结果数组中的最后一个元素是否相同，因为已经排序，所以重复元素会在相邻位置
   3.如果不相同，则将该元素存入结果数组中
   代码如下：
     Array.prototype.unique2 = function(){
      this.sort(); //先排序
      var res = [this[0]];
      for(var i = 1; i < this.length; i++){
       if(this[i] !== res[res.length - 1]){
        res.push(this[i]);
       }
      }
      return res;
     }
     var arr = [1, 'a', 'a', 'b', 'd', 'e', 'e', 1, 0]
     alert(arr.unique2());
   第二种方法也会有一定的局限性，因为在去重前进行了排序，所以最后返回的去重结果也是排序后的。如果要求不改变数组的顺序去重，那这种方法便不可取了。

   第三种方法（推荐使用）
   思路：
   1.创建一个新的数组存放结果
   2.创建一个空对象
   3.for循环时，每次取出一个元素与对象进行对比，如果这个元素不重复，则把它存放到结果数组中，同时把这个元素的内容作为对象的一个属性，并赋值为1，存入到第2步建立的对象中。
   说明：至于如何对比，就是每次从原数组中取出一个元素，然后到对象中去访问这个属性，如果能访问到值，则说明重复。
   代码如下：
   Array.prototype.unique3 = function(){
    var res = [];
    var json = {};
    for(var i = 0; i < this.length; i++){
     if(!json[this[i]]){
      res.push(this[i]);
      json[this[i]] = 1;
     }
    }
    return res;
   }
   var arr = [112,112,34,'你好',112,112,34,'你好','str','str1'];
   alert(arr.unique3());

2.你能给我说一下JS数组去重的方法吗（5种）
   1.遍历数组法
   最简单的去重方法，实现思路：新建一新数组，遍历传入数组，值不在新数组就加入该新数组中；注意点：判断值是否在数组的方法“indexOf”是ECMAScript5 方法，IE8以下不支持，
   需多写一些兼容低版本浏览器代码，源码如下：
        // 最简单数组去重法
        function unique1(array){
            var n = []; //一个新的临时数组
            //遍历当前数组
            for(var i = 0; i < array.length; i++){
                //如果当前数组的第i已经保存进了临时数组，那么跳过，
                //否则把当前项push到临时数组里面
                if (n.indexOf(array[i]) == -1) n.push(array[i]);
            }
            return n;
        }
   2.对象键值对法
   该方法执行的速度比其他任何方法都快， 就是占用的内存大一些，实现思路：新建一js对象以及新数组，遍历传入数组时，判断值是否为js对象的键，不是的话给对象新增该键并放入新数组。
   注意点：判断是否为js对象键时，会自动对传入的键执行“toString()”，不同的键可能会被误认为一样；例如： a[1]、a["1"] 。解决上述问题还是得调用“indexOf”。
   代码如下：
         // 速度最快， 占空间最多（空间换时间）
         function unique2(array){
               var n = {}, r = [], len = array.length, val, type;
               for (var i = 0; i < array.length; i++) {
                   val = array[i];
                   type = typeof val;
                   if (!n[val]) {
                       n[val] = [type];
                       r.push(val);
                   } else if (n[val].indexOf(type) < 0) {
                       n[val].push(type);
                       r.push(val);
                   }
               }
               return r;
         }
   3.数组下标判断法
     还是得调用“indexOf”性能跟方法1差不多，实现思路：如果当前数组的第i项在当前数组中第一次出现的位置不是i，那么表示第i项是重复的，忽略掉。否则存入结果数组。
     代码如下：
         function unique3(array){
              var n = [array[0]]; //结果数组
              //从第二项开始遍历
              for(var i = 1; i < array.length; i++) {
                  //如果当前数组的第i项在当前数组中第一次出现的位置不是i，
                  //那么表示第i项是重复的，忽略掉。否则存入结果数组
                  if (array.indexOf(array[i]) == i) n.push(array[i]);
              }
              return n;
         }
   4.排序后相邻去除法
   虽然原生数组的”sort”方法排序结果不怎么靠谱，但在不注重顺序的去重里该缺点毫无影响。实现思路：给传入数组排序，排序后相同值相邻，
   然后遍历时新数组只加入不与前一值重复的值。
   代码如下：
     // 将相同的值相邻，然后遍历去除重复值
     function unique4(array){
          array.sort();
          var re=[array[0]];
          for(var i = 1; i < array.length; i++){
              if( array[i] !== re[re.length-1]){
                 re.push(array[i]);
              }
          }
          return re;
     }
   5.优化遍历数组法
   该方法的实现代码相当酷炫，实现思路：获取没重复的最右一值放入新数组。（检测到有重复值时终止当前循环同时进入顶层循环的下一轮判断）
   推荐：
       // 思路：获取没重复的最右一值放入新数组
       function unique5(array){
       var r = [];
       for(var i = 0, l = array.length; i < l; i++) {
        for(var j = i + 1; j < l; j++)
         if (array[i] === array[j]) j = ++i;
        r.push(array[i]);
        }
        return r;
       }
   判断浏览器是否支持indexOf ，indexOf 为ecmaScript5新方法 IE8以下（包括IE8， IE8只支持部分ecma5）不支持！
        if (!Array.prototype.indexOf){
            // 新增indexOf方法
            Array.prototype.indexOf = function(item){
                 var result = -1, a_item = null;
                 if (this.length == 0){
                    return result;
                 }
                 for(var i = 0, len = this.length; i < len; i++){
                     a_item = this[i];
                     if (a_item === item){
                        result = i;
                        break;
                     }
                 }
                 return result;
            }
        }


