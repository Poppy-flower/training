1.前端性能优化方案有哪些？
   （1）使用CDN加速（内容分发网络）
   （2）减少HTTP请求（减少请求数，降低请求量），利用这一原理来实现的一些具体方法包括：
        第一，脚本合并；
        第二，CSS雪碧图；
        第三，文件压缩，包括CSS、javascript、图片的压缩；
        第四，延迟加载图片，首先只加载第一屏的图片，当用户滚动访问后面的内容时再加载相应的图片；
        第五，CSS3图标；
        第六，避免重定向等等。
   （3）代码优化，常见的包括：减少DOM操作；减少重绘和重排；避免CSS表达式；
   （4）缓存Ajax
   （5）配置Etags
   （6）Yahoo军规三十五条
2-1.脚本合并
   （1）原理：通常一个大型网站需要依赖多个JS文件，可以把多个JS文件合并成一个，这样只需要引入一个。
   （2）实现的方法有哪些？
        Grunt、JSCompress
2-2.CSS雪碧图
   （Q1）原理：CSS Sprites其实就是把网页中一些背景图片整合到一张图片文件中，再利用CSS的"background-image"和"background-position" 的组合。
   （Q2）优点
       （1）减少http请求，提高页面的加载速度。只需要加载一张图片，并且因为只需要一个色表，这张图片的大小很可能比拼合前的总尺寸小。
       （2）减少鼠标滑过的bug，比如IE6不会主动预加载：hover中的背景图片，因此使用多张图片时会出现闪白的现象。
   （Q3）缺点
       （1）最大的问题是内存的使用，除非非常小心的组织，否则会留下大量无用的空白。
       （2）影响页面缩放功能，缩放时要避免雪碧中相邻图片露出来。
2-3.JS文件压缩
   （1）最小化：删除注释和空格等不必要的字符。安全、直白，文件减少21%。
   （2）混淆：删除注释和空格，将函数名和变量名替换成短的字符串，难于反向工程。复杂，容易产生问题，文件减少25%。
2-4文件压缩的方法：
            （1）JSMin
            （2）YUI Compressor在线
            （3）在线HTML/CSS/JS压缩
            （4）Javascript压缩／解压缩
            （5）Grunt
            （6）批量图片压缩
            （7）压缩HTTP响应内容：Gzip
3.延迟图片加载
    原理：首先只加载第一屏的图片，当用户滚动访问后面的内容时再加载相应的图片；
    方法：将图片的src属性值存放在一个非src的自定义属性中，判断图片进入可视区域后将路径赋值给src属性。
4.避免重定向
   （1）重定向会增加http请求数，但必要的重定向有利于提高用户体验！
   （2）301：永久重定向，抓取新内容的同时也将旧的网址替换为重定向之后的网址；
       302：暂时重定向，抓取新的内容而保留旧的网址；
       SEO：302好于301
   （3）方法：
       定义链接URL时，使用最完整、最直接的网址，如：
          使用www.baidu.com而不是baidu.com
          使用www.google.com.hk而不是www.google.com
          使用http://write.blog.csdn.net/而不是http://write.blog.csdn.net
       在使用Response.Redirect的时候，设置第二个参数为false
          为true时，相当于在Redirect后调用Exit Sub／Function，不再执行Redirect后的语句；
          为false时，依然执行Redirect后的语句。
5.减少DOM操作的方式有哪些？
   对DOM的操作代价是昂贵的，这在网页中通常是一个性能瓶颈。
   减少对DOM元素的查询和修改。
   （1）查询：需要多次访问的可以保存在变量中；
   （2）修改：使用innerHTML代替DOM操作。
6-1.重绘（repaint）和重排（reflow）
  （1）重绘（repaint）就是在一个元素的外观改变，但没有改变布局、宽高的情况下发生的，比如改变visibility、outline、背景颜色等等。
  （2）重排（reflow）就是DOM的变化影响了元素的几何属性、宽和高等，导致浏览器会重新计算元素的几何属性，比如：改变窗口大小、改变文字大小、内容改变、浏览器窗口变化、style属性改变等等。
6-2.减少重排和重绘
   （1）页面生成时会进行至少一次渲染，用户访问过程中还可能不停地重新渲染，情况可能是：
        第一，修改DOM；
        第二，修改样式表；
        第三，用户事件（比如鼠标悬停、页面滚动、输入框键入文字、改变窗口大小等等）
   （2）重新渲染，就需要重新生成布局和重新绘制。前者叫做重排，表现为页面布局出现变动。后者叫做重绘。重绘不一定需要重排，比如改变元素颜色，因为此时页面布局并未发生改变；而重排一定会导致重绘，布局的变化会同时触发"重排"和"重绘"。"重排"和"重绘"均会使性能下降，所以应该尽量避免。
   （3）一般规则
        样式表越简单，重排和重绘就越快；
        重排和重绘的DOM元素层级越高，成本越高；
        table元素的重排和重绘成本高于div元素
   （4）优化方法
        通过class改变样式，避免逐条改变；
        对display：none的元素操作不会引发重排和重绘，因此需要多次操作的元素可改变其display属性在进行操作，完成操作后再将其进行显示，这样只需要两次重排和重绘；另外，visibility：hidden的元素操作只重绘；
        脱离文档流的元素（如position为absolute或fixed、float的元素）重排开销小，因为对文档流中元素无影响；
7.Yahoo军规三十五条
   网页内容
           减少http请求次数
           减少DNS查询次数
           避免页面跳转
           缓存Ajax
           延迟加载
           提前加载
           减少DOM元素数量
           根据域名划分内容
           减少iframe数量
   服务器
           使用CDN
           添加Expires或Cache-Control报文头
           Gzip压缩传输功能
           配置Etags
           尽早flush输出
           使用GET Ajax请求
           避免空的图片src
   Cookie
           减少cookie大小
           页面内容使用无cookie域名
   CSS
           将样式表置顶
           避免CSS表达式
           用<link>代替@import
           避免使用Filters
   Javascript
           将脚本置底
           使用外部javascript和css文件
           精简javascript和CSS
           去除重复脚本
           减少DOM访问
           使用智能事件处理
   图片
           优化图像
           优化CSS雪碧图
           不要再HTML中缩放图片
           使用小且可缓存的favicon.ico
   移动客户端
           保持单个内容小于25K
           打包组建成符合文档
8.怎么压缩CSS和JS？
   我用的是Grunt压缩的，首先要有一个Grunt对象，然后
   压缩CSS：
        grunt.loadNpmTasks('grunt-contrib-cssmin');
        grunt.initConfig({
           cssmin:{
              css:{
                  src:"dext/style.css";  //原路径
                  dest:"dext/style.min.css";  //新路径
              }
           }
        })
      命令行：grunt cssmin
   压缩JS：
        grunt.loadNpmTasks('grunt-contrib-uglify');
        grunt.initConfig({
           uglify:{
              js:{
                  src:'......js';
                  dest:'......min.js';
              }
           }
        });








